import java.util.*;
public class ClassTicTacToe {
    static ArrayList<Integer> playerPositions = new ArrayList<Integer>();
    static ArrayList<Integer> cpuPositions = new ArrayList<Integer>();

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        //makes 3 by 3 game board
        char [] [] gameBoard = {{'1', '|', '2', '|', '3'},
                {'-', '+', '-', '+', '-'},
                {'4', '|', '5', '|', '6'},
                {'-', '+', '-', '+', '-'},
                {'7', '|', '8', '|', '9'}};

        //prints game board
        printGameBoard(gameBoard);

        while (true) {
            //takes user input
            Scanner scan = new Scanner(System.in);
            System.out.println("Enter your placement (1-9):");
            int playerPos = scan.nextInt();
            //if a position is already taken by player or cpu, user must input new position
            while (playerPositions.contains(playerPos) || cpuPositions.contains(playerPositions)) {
                System.out.println("Position taken! Enter a correct Position");
                playerPos = input.nextInt();
            }

            //places the player's piece
            placePiece(gameBoard, playerPos, "player");

            //checks winner
            String result = checkWinner();

            //breaks loop when either player or CPU win
            if (result.length() > 0) {
                System.out.println(result);
                //printing game board
                printGameBoard(gameBoard);
                break;
            }

            //randomizes across numbers 1 - 9 for cpu's turn and places the piece there
            Random rand = new Random();
            int cpuPos = rand.nextInt(9) + 1;

            //makes cpu pick position that has not already been picked
            while (playerPositions.contains(cpuPos) || cpuPositions.contains(cpuPos)) {
                cpuPos = rand.nextInt(9) + 1;
            }

            //places piece for cpu turn
            placePiece(gameBoard, cpuPos, "cpu");

            //prints game board
            printGameBoard(gameBoard);

            //assigns result to check winner
            result = checkWinner();

            //prints when either player or CPU win because then there is a result and the length of the result would be greater than 0
            if (result.length() > 0) {
                System.out.println(result);
                break;
            }

        }
    }
        public static void printGameBoard ( char[][] gameBoard){
            //prints the game board
            for (char[] row : gameBoard) { //for each 1D array
                for (char c : row) { // for each char inside of the row
                    System.out.print(c);
                }
                System.out.println();
            }
        }

        public static void placePiece ( char[][] gameBoard, int pos, String user){
            //determines what symbol is going to replace the position entered
            //player = X and CPU = O
            //adds each position to its respective list
            char symbol = ' ';
            if (user.equals("player")) {
                symbol = 'X';
                playerPositions.add(pos);
            } else if (user.equals("cpu")) {
                symbol = 'O';
                cpuPositions.add(pos);
            }
            //switch = if user enters a number 1 -9, the number is switched to an X
            switch (pos) {
                case 1:
                    gameBoard[0][0] = symbol;
                    break;
                case 2:
                    gameBoard[0][2] = symbol;
                    break;
                case 3:
                    gameBoard[0][4] = symbol;
                    break;
                case 4:
                    gameBoard[2][0] = symbol;
                    break;
                case 5:
                    gameBoard[2][2] = symbol;
                    break;
                case 6:
                    gameBoard[2][4] = symbol;
                    break;
                case 7:
                    gameBoard[4][0] = symbol;
                    break;
                case 8:
                    gameBoard[4][2] = symbol;
                    break;
                case 9:
                    gameBoard[4][4] = symbol;
                    break;
            }


        }
    public static String checkWinner(){

        //checks win for the rows
        List topRow = Arrays.asList(1, 2, 3);
        List midRow = Arrays.asList(4, 5, 6);
        List botRow = Arrays.asList(7, 8, 8);

        //checks win for the columns
        List leftCol = Arrays.asList(1, 4, 7);
        List midCol = Arrays.asList(2, 5, 8);
        List rightCol = Arrays.asList(3, 6, 9);

        //checks win for the diagonals
        List cross1 = Arrays.asList(1, 5, 9);
        List cross2 = Arrays.asList(3, 5, 7);

        //adds all the lists to a new big list
        List<List> winning = new ArrayList<List>();
        winning.add(topRow);
        winning.add(midRow);
        winning.add(botRow);
        winning.add(leftCol);
        winning.add(midCol);
        winning.add(rightCol);
        winning.add(cross1);
        winning.add(cross2);

        //checks if it contains all the elements in top row, middle row...
        for (List l: winning){
            if(playerPositions.containsAll(l)){
                return "Congratulations you won!";
            } else if(cpuPositions.containsAll(l)){
                return "CPU wins! Sorry :(";
            } else if (playerPositions.size() + cpuPositions.size() == 9){
                return "Tie!";
            }

        }

        return ""; // to get rid of the error

    }

}
